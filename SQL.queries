#Question:
#Zomato Case Study-

# 1 Find customers who have never placed an order
SELECT u.UserID, u.Name, u.Email 
FROM Users u
LEFT JOIN Orders o ON u.UserID = o.UserID
WHERE o.OrderID IS NULL;

# 2. Calculate the average price of dishes in each category
SELECT 
    Category, AVG(Price) AS AveragePrice
FROM
    Food
GROUP BY Category;

# 3. Find delivery partners who have completed more than 100 orders
SELECT PartnerID, Name, VehicleType, TotalOrders 
FROM Delivery_Partner
WHERE TotalOrders > 100;

# 4. Find the total revenue generated by each restaurant
SELECT r.RestaurantID, r.Name, SUM(o.TotalAmount) AS TotalRevenue
FROM Restaurants r
JOIN Orders o ON r.RestaurantID = o.RestaurantID
GROUP BY r.RestaurantID, r.Name
ORDER BY TotalRevenue DESC;

# 5. List customers who have rated the platform below 4.5
SELECT UserID, Name, Email, Rating 
FROM Users
WHERE Rating < 4.5;

# 6. Find restaurants that specialize in ‘Indian’ cuisine and have a rating above 4.5
SELECT RestaurantID, Name, Location, Rating
FROM Restaurants
WHERE Specialty = 'Indian' AND Rating > 4.5;

# 7. Find the restaurant with the highest number of repeated customers
SELECT r.RestaurantID, r.Name, COUNT(DISTINCT o.UserID) AS RepeatedCustomers
FROM Restaurants r
JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.UserID IN (
    SELECT UserID
    FROM Orders
    GROUP BY UserID
    HAVING COUNT(OrderID) > 1
)
GROUP BY r.RestaurantID, r.Name
ORDER BY RepeatedCustomers DESC
LIMIT 1;

# 8. Find the food item with the highest revenue
SELECT 
f.FoodID, f.FoodName, SUM(od.Subtotal) AS TotalRevenue
FROM Food f
JOIN Order_Details od ON f.FoodID = od.FoodID
GROUP BY f.FoodID, f.FoodName
ORDER BY TotalRevenue DESC
LIMIT 1;

# 9. Find restaurants where the average food price exceeds ₹250
SELECT r.RestaurantID, r.Name, r.Location
FROM Restaurants r
WHERE r.RestaurantID IN (
    SELECT DISTINCT o.RestaurantID
    FROM Orders o
    JOIN Order_Details od ON o.OrderID = od.OrderID
    JOIN Food f ON od.FoodID = f.FoodID
    GROUP BY o.RestaurantID
    HAVING AVG(f.Price) > 250
);

# 10. Find the favorite food item for each customer 
SELECT o.UserID, f.FoodName, COUNT(od.FoodID) AS OrderCount
FROM Order_Details od
JOIN Food f ON od.FoodID = f.FoodID
JOIN Orders o ON od.OrderID = o.OrderID
WHERE od.FoodID IN (
    SELECT od.FoodID
    FROM Order_Details od
    GROUP BY od.FoodID
    HAVING COUNT(od.FoodID) = (
        SELECT MAX(FoodCount)
        FROM (
            SELECT COUNT(od.FoodID) AS FoodCount
            FROM Order_Details od
            WHERE od.OrderID = o.OrderID
            GROUP BY od.FoodID
        ) AS FoodCounts
    )
)
GROUP BY o.UserID, f.FoodName
ORDER BY OrderCount DESC;

# 11. Find the customer with the maximum number of orders 
SELECT u.UserID, u.Name, COUNT(o.OrderID) AS TotalOrders
FROM Users u
JOIN Orders o ON u.UserID = o.UserID
GROUP BY u.UserID, u.Name
ORDER BY TotalOrders DESC
LIMIT 1;

# 12. Find orders where the total amount exceeds ₹1000
SELECT o.OrderID, o.TotalAmount
FROM Orders o
WHERE o.TotalAmount > 1000;

# 13. Find the delivery partner with the highest average rating
SELECT PartnerID, Name, AVG(Rating) AS AvgRating
FROM Delivery_Partner
GROUP BY PartnerID, Name
ORDER BY AvgRating DESC
LIMIT 1;
